[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "I have big interests in\n- Asset Pricing\n- Quantitative & Algorithmic Trading\n- Portfolio Management & Optimization"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Some Quantitative Things.",
    "section": "",
    "text": "Fama-French 5-factor Model Implementation\n\n\n\n\n\n\nfactor model\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nSep 17, 2024\n\n\nSangwon Woo\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/fama-french-5-factor/ff5f.html",
    "href": "posts/fama-french-5-factor/ff5f.html",
    "title": "Fama-French 5-factor Model Implementation",
    "section": "",
    "text": "This is a post with Fama-French 5 Factor Model\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n%matplotlib inline\n\npd.set_option('display.max_colwidth', 100)\npd.set_option('display.width', 160)\npd.set_option('display.precision', 18)\n\n\ndef get_size(x, m1, m2, m3, m4):\n    if x&lt;=m1:\n        return 'S1'\n    elif x&gt;m1 and x&lt;=m2:\n        return 'S2'\n    elif x&gt;m2 and x&lt;=m3:\n        return 'S3'\n    elif x&gt;m3 and x&lt;=m4:\n        return 'S4'\n    elif x&gt;m4:\n        return 'S5'\n    \ndef get_beme(x, m1, m2, m3, m4):\n    if x&lt;=m1:\n        return 'B1'\n    elif x&gt;m1 and x&lt;=m2:\n        return 'B2'\n    elif x&gt;m2 and x&lt;=m3:\n        return 'B3'\n    elif x&gt;m3 and x&lt;=m4:\n        return 'B4'\n    elif x&gt;m4:\n        return 'B5'\n\n\ninfo = pd.read_csv(\"info.csv\")\ndel info['Name'], info['주기'], info['Symbol'], info['결산월']\ninfo.columns = ['year', 'industry', 'ticker', 'exchcd']\ninfo = info[info['exchcd'] == '유가증권시장']\ninfo = info[info['industry'] != 'K']\ninfo = info.sort_values(by=['ticker', 'year']).reset_index(drop=True)[['ticker', 'year', 'exchcd']]\ninfo = info[~(info['ticker'].isin(['A008080', 'A005560']))]\n\n\nfdf_c = ['ticker', 'name', 'year', 't-1장부가치']\nret_c = ['ticker', 'year', '시가총액']\n\n\nfdf = pd.read_csv(\"finance.csv\")\nfdf.columns = ['ticker', 'name', '결산월', 'year', '보통주자본금', '자본잉여금', '이익잉여금', '자기주식', '이연법인세부채', '총자본', '우선주자본금', '이연법인세자산', '영업이익', '총자산']\n\nfor c in fdf.columns.tolist():\n    if c in ['ticker', 'name', '결산월', 'year']: continue\n    fdf.loc[:, c] = fdf[c]*1000\n    \nfdf = fdf.sort_values(by=['ticker', 'year'])\nfdf = fdf[fdf['보통주자본금'].notna()].reset_index(drop=True)\nfdf['t-1장부가치'] = fdf.groupby(by='ticker')[['보통주자본금', '자본잉여금', '이익잉여금', '자기주식', '이연법인세부채']].shift(1).sum(axis=1)\nfdf['결산월'] = fdf['결산월'].astype('int8')\nfdf['t-1영업이익'] = fdf.groupby('ticker')['영업이익'].shift(1)\nfdf['OP'] = fdf['t-1영업이익'] / fdf['t-1장부가치']\nfdf['t-1총자산'] = fdf.groupby(by='ticker')['총자산'].shift(1)\nfdf['t-2총자산'] = fdf.groupby(by='ticker')['총자산'].shift(2)\nfdf['INV'] = (fdf['t-1총자산']-fdf['t-2총자산']) / fdf['t-1총자산']\nfdf = fdf[['ticker', 'year', 't-1장부가치', 'OP', 'INV']]\n\n\ndf = pd.read_csv(\"월별주가.csv\")\ndf = df.melt(id_vars=['Symbol', 'Name']).rename(columns={'Symbol':'ticker', \"variable\":'date', 'value':'price'}).sort_values(by=['ticker', 'date'])\ndf['price-12m'] = df.groupby(by='ticker')['price'].shift(12)\ndf['price-1m'] = df.groupby(by='ticker')['price'].shift(1)\ndf['mom'] = (df['price-1m'] - df['price-12m']) / df['price-12m'] * 100\ndf['월수익률'] = (df['price'] - df['price-1m']) / df['price'] * 100\ndf = df[np.where(df[['price', 'price-12m', 'price-1m', 'mom', '월수익률']].isna().sum(axis=1)==5, False, True)].reset_index(drop=True)\ndf['date'] = pd.to_datetime(df['date'])\ndf['year'] = df['date'].dt.year\ndf['month'] = df['date'].dt.month\ndf = df[['date', 'year', 'month', 'ticker', '월수익률', 'price', 'price-1m', 'mom']]\n\n\nrmrf = pd.read_csv(\"rmrf.csv\")\nrmrf['Date'] = pd.to_datetime(rmrf['Date'], format='%Y%m')\nrmrf['year'], rmrf['month'] = rmrf['Date'].dt.year, rmrf['Date'].dt.month\n\n\nret = pd.read_csv(\"return.csv\")\ncols = ret.columns.tolist()\nn_cols = [cols[0], cols[4]] + cols[6:]\nret = ret[n_cols]\nret = ret.rename(columns={\"Symbol\":\"ticker\", \"Item Name \":\"item\"})\nsize, rts = ret['item'].unique().tolist()\nret.loc[ret['item'] == size, \"item\"] = '시가총액'\nret.loc[ret[\"item\"] == rts, \"item\"] = '월수익률'\nret = pd.melt(ret, id_vars=[\"ticker\", \"item\"], var_name='date')\nret = pd.pivot(ret, index=['ticker', 'date'], columns='item').reset_index()\nret.columns = ['ticker', 'date', '시가총액', '월수익률']\nret = ret[['ticker', 'date', '시가총액']]\nret['date'], ret['시가총액'] = pd.to_datetime(ret['date']), ret['시가총액'] * 1000000\nret['year'], ret['month'] = ret['date'].dt.year, ret['date'].dt.month\nret = ret[ret['시가총액'].notna()].reset_index(drop=True)\nret = pd.merge(ret, ret[ ret['month'] == 6][ret_c], how='left', on=['ticker', 'year'])\nret = ret.rename(columns={'시가총액_x':'t시총', '시가총액_y':'SIZE'})\nret = ret.merge(info, how='left', on=['ticker', 'year'])\nret = ret[ret['exchcd'].notna()].reset_index(drop=True)\nret = ret[['year', 'month', 'ticker', 't시총', 'SIZE']]\n\n\nrdf = df.merge(ret, how='left', on=['year', 'month', 'ticker'])\n\n\nret = pd.DataFrame()\nfor c, df in rdf.groupby(by='ticker'):\n    # print(c, end=' ')\n    df['t-1시총'] = df['t시총'].shift(12)\n    df = pd.merge(df, df[ df['month'] == 6][['ticker', 'year', 't-1시총']], how='left', on=['ticker', 'year'])\n    del df['t-1시총_x']\n    df = df.rename(columns={'t-1시총_y':'t-1시총'})\n    ret = pd.concat([ret, df])\nret = ret.reset_index(drop=True)\n\n\ntdf = ret.merge(fdf, how='left', on=['year', 'ticker'])\ntdf = tdf.assign(BEME=tdf['t-1장부가치'] / tdf['t-1시총'])\ntdf = tdf.merge(rmrf, how='left', on=['year', 'month'])\ntdf = tdf[['date', 'year', 'month', 'ticker', '월수익률', 'price', 'price-1m', 'mom', 't시총', 't-1시총','RM-RF', 'SIZE', 'BEME', 'OP', 'INV']]\n\n\ndf = pd.DataFrame()\nfor y in [2017, 2018, 2019, 2020, 2021, 2022]:\n    ydf = tdf[(tdf['year']==y)&(tdf['month']==6)]\n    ydf = ydf[(ydf['SIZE'].notna())&(ydf['BEME'].notna())&(ydf['OP'].notna())&(ydf['INV'].notna())]\n    \n    s1 = ydf['SIZE'].quantile(0.5)\n    b1, b2 = ydf['BEME'].quantile([0.3, 0.7])\n    o1, o2 = ydf['OP'].quantile([0.3, 0.7])\n    i1, i2 = ydf['INV'].quantile([0.3, 0.7])\n    \n    ydf = ydf.assign(size=np.where(ydf['SIZE']&lt;=s1, 'small', 'big'))\n    ydf = ydf.assign(beme=np.where(ydf['BEME']&lt;=b1, 'value', np.where(ydf['BEME']&lt;=b2, 'neutral', 'growth')))\n    ydf = ydf.assign(op=np.where(ydf['OP']&lt;=o1, 'robust', np.where(ydf['OP']&lt;=o2, 'neutral', 'weak')))\n    ydf = ydf.assign(inv=np.where(ydf['INV']&lt;=i1, 'conservative', np.where(ydf['INV']&lt;=i2, 'neutral', 'aggressive')))\n    ydf=  ydf[['ticker', 'size', 'beme', 'op', 'inv']]\n    \n    rdf = tdf[tdf['date'].between(f'{y}0701', f'{y+1}0630')].merge(ydf, how='left', on=['ticker'])\n    rdf['port_year'] = str(y)\n    df = pd.concat([df, rdf])\n\n\ndf = df[(df['size'].notna())&(df.beme.notna())&(df.op.notna())&(df.inv.notna())].reset_index(drop=True)\ndf = df[['port_year', 'ticker', 'year', 'month', '월수익률', 'size', 'beme', 'op', 'inv']]\n\n\nmat = pd.DataFrame()\n\nfor c, tf in df.groupby(by='port_year'):\n    tf['size-beme'] = tf['size']+' '+ tf['beme']\n    tf['size-op'] = tf['size']+' '+ tf['op']\n    tf['size-inv'] = tf['size']+' '+ tf['inv']\n        \n    sf = tf.groupby(by=['size-beme', 'month'])['월수익률'].mean()\n    for m, zf in sf.groupby('month'):\n        df.loc[(df['port_year']==c)&(df['month']==m), \"SMB(B/M)\"] = ((zf['small value'] + zf['small neutral'] + zf['small growth'])/3 - (zf['big value'] + zf['big neutral'] + zf['big growth'])/3).tolist()[0]\n        df.loc[(df['port_year']==c)&(df['month']==m), \"HML\"] = ((zf['small value'] + zf['big value'])/2 - (zf['small growth'] + zf['big growth'])/2).tolist()[0]\n    \n    sf = tf.groupby(by=['size-op', 'month'])['월수익률'].mean()\n    for m, zf in sf.groupby('month'):\n        df.loc[(df['port_year']==c)&(df['month']==m), \"SMB(OP)\"] = ((zf['small robust'] + zf['small neutral'] + zf['small weak'])/3 - (zf['big robust'] + zf['big neutral'] + zf['big weak'])/3).tolist()[0]\n        df.loc[(df['port_year']==c)&(df['month']==m), \"RMW\"] = ((zf['small robust'] + zf['big robust'])/2 - (zf['small weak'] + zf['big weak'])/2).tolist()[0]\n        \n    sf = tf.groupby(by=['size-inv', 'month'])['월수익률'].mean()\n    for m, zf in sf.groupby('month'):\n        df.loc[(df['port_year']==c)&(df['month']==m), \"SMB(INV)\"] = ((zf['small conservative'] + zf['small neutral'] + zf['small aggressive'])/3 - (zf['big conservative'] + zf['big neutral'] + zf['big aggressive'])/3).tolist()[0]\n        df.loc[(df['port_year']==c)&(df['month']==m), \"CMA\"] = ((zf['small conservative'] + zf['big conservative'])/2 - (zf['small aggressive'] + zf['big aggressive'])/2).tolist()[0]\n    \n    df.loc[(df['port_year']==c), \"SMB\"] = (df['SMB(B/M)'] + df['SMB(OP)'] + df['SMB(INV)'])/3\ndf = df.groupby(by=['year', 'month'])[['SMB', 'HML', 'RMW', 'CMA']].mean().reset_index()\ndf = df.merge(rmrf[['year', 'month', 'RM-RF']], how='left', on=['year', 'month'])\n\n\nfor t, asdf in tdf.groupby(by=['year', 'month']):\n    if t[0] &lt; 2017: continue\n    if t[0]==2017 and t[1] &lt; 6: continue\n    asdf = asdf[['year', 'month', '월수익률', 'price-1m', 'mom']]\n    asdf=asdf.dropna().sort_values('mom')\n    \n    m1, m2 = asdf['mom'].quantile([0.3, 0.7])\n    asdf.loc[asdf['mom']&lt;=m1, \"MOM\"] = 'low'\n    asdf.loc[asdf['mom']&gt;m2, 'MOM'] = 'high'\n    high, low = asdf.groupby('MOM')[['month', '월수익률']].mean()['월수익률'].tolist()\n    df.loc[(df['year']==t[0])&(df['month']==t[1]), \"MOM\"] = high-low\n    \n    r1, r2 = asdf['price-1m'].quantile([0.3, 0.7])\n    asdf.loc[asdf['price-1m']&lt;=r1, \"REV\"] = 'low'\n    asdf.loc[asdf['price-1m']&gt;r2, 'REV'] = 'high'\n    high, low = asdf.groupby('REV')[['month', '월수익률']].mean()['월수익률'].tolist()\n    df.loc[(df['year']==t[0])&(df['month']==t[1]), \"REV\"] = low-high\n\n\ndf.to_csv('factor.csv', index=False)\n\n\n# 5x5 portfolio 수익률\ndf = pd.DataFrame()\nfor y in [2017, 2018, 2019, 2020, 2021, 2022]:\n    ydf = tdf[(tdf['year']==y)&(tdf['month']==6)]\n    m1, m2, m3, m4 = ydf['SIZE'].quantile([0.2, 0.4, 0.6, 0.8])\n    ydf = ydf.assign(size=ydf['SIZE'].apply(get_size, args=(m1, m2, m3, m4)))\n    m1, m2, m3, m4 = ydf['BEME'].quantile([0.2, 0.4, 0.6, 0.8])\n    ydf = ydf.assign(beme=ydf['BEME'].apply(get_beme, args=(m1, m2, m3, m4)))\n    ydf.loc[:, 'portfolio'] = ydf['year'].astype(\"str\") + ydf['size'] + ydf['beme']\n    ydf = ydf[['ticker', 'portfolio']]\n    \n    rdf = tdf[tdf['date'].between(f'{y}0701', f'{y+1}0630')].merge(ydf, how='left', on=['ticker'])\n    rdf = rdf.groupby(\"portfolio\")[['월수익률']].mean().reset_index().sort_values('portfolio')\n    rdf.loc[:, 'year'] = rdf['portfolio'].str[:4]\n    rdf.loc[:, 'port'] = rdf['portfolio'].str[4:]\n    rdf = rdf.pivot(columns='year', index='port', values='월수익률')\n    df = pd.concat([df, rdf], axis=1)\ndf = df.T.mean().reset_index()\ndf['SIZE'] = df['port'].str[:2]\ndf['BE/ME'] = df['port'].str[2:]\ndf = df.pivot(columns='BE/ME', index='SIZE', values=0)\n\n\ndf.to_csv('5x5 portfolio.csv')"
  }
]